import React from 'react';

import { render } from '@testing-library/react';
import { Spinner } from './Spinner';

// Generated by CodiumAI

describe('Spinner', () => {
  // Renders a spinner with default size and variant
  test('デフォルトのサイズとバリアントでスピナーをレンダリングする', () => {
    const { container } = render(<Spinner />);
    expect(container).toBeInTheDocument();
  });

  // Renders a spinner with custom size and variant
  test('カスタムのサイズとバリアントでスピナーをレンダリングする', () => {
    const { container } = render(<Spinner size="lg" variant="light" />);
    expect(container).toBeInTheDocument();
  });

  // Renders a spinner with no className
  test('classNameなしでスピナーをレンダリングする', () => {
    const { container } = render(<Spinner />);
    expect(container).toBeInTheDocument();
  });

  // Renders a spinner with data-testid attribute
  test('data-testid属性を持つスピナーをレンダリングする', () => {
    const { getByTestId } = render(<Spinner />);
    expect(getByTestId('loading')).toBeInTheDocument();
  });

  // Renders a spinner with size set to 'lg'
  test('サイズを「lg」に設定したスピナーをレンダリングする', () => {
    const { container } = render(<Spinner size="lg" />);
    expect(container).toBeInTheDocument();
  });

  // Renders a spinner with size set to 'sm'
  test('サイズを「sm」に設定したスピナーをレンダリングする', () => {
    const { container } = render(<Spinner size="sm" />);
    expect(container).toBeInTheDocument();
  });

  // Renders a spinner with variant set to 'light'
  test('バリアントを「light」に設定したスピナーをレンダリングする', () => {
    const { container } = render(<Spinner variant="light" />);
    expect(container).toBeInTheDocument();
  });

  // test passing all variant and size
  test('全てのvariantsとsizesでレンダリングする', () => {
    // Render the Spinner component with all variants and sizes
    const { container } = render(
      <>
        <Spinner variant="light" size="lg" />
        <Spinner variant="primary" size="md" />
        <Spinner variant="light" size="sm" />
        <Spinner variant="primary" size="xl" />
      </>,
    );

    // Assert that the Spinner components are rendered with the correct SVG elements
    const svgs = container.querySelectorAll('svg');
    expect(svgs.length).toBe(4);
    expect(svgs[0].getAttribute('class')).toBe(
      'animate-spin h-16 w-16 text-white',
    );
    expect(svgs[1].getAttribute('class')).toBe(
      'animate-spin h-8 w-8 text-blue-200',
    );
    expect(svgs[2].getAttribute('class')).toBe(
      'animate-spin h-4 w-4 text-white',
    );
    expect(svgs[3].getAttribute('class')).toBe(
      'animate-spin h-24 w-24 text-blue-200',
    );

    // Assert that the Spinner components are rendered with the correct circle and path elements
    const circles = container.querySelectorAll('circle');
    const paths = container.querySelectorAll('path');
    expect(circles.length).toBe(4);
    expect(paths.length).toBe(4);

    // Assert that the Spinner components are rendered with the correct span element
    const spans = container.querySelectorAll('span');
    expect(spans.length).toBe(4);
    expect(spans[0].getAttribute('class')).toBe('sr-only');
    expect(spans[0].textContent).toBe('Loading');
  });
});
